[{"categories":["Productivity"],"content":"¬†If you‚Äôre like me and you‚Äôve tried to maintain multiple Obsidian vaults, odds are you‚Äôve encountered the same headache of having to sync plugins and settings which usually takes you out of the flow. You also might be thinking to yourself, why haven‚Äôt I done something about this yet, I mean, I love hacking in the terminal don‚Äôt I? I separate vaults based on a variety of reasons, but a common reason would be to separate your public and private notes. This is beneficial for organization, but creates more busy work if you like keeping your plugins and settings in sync. Now that my vault count has now grown beyond 3, I finally broke down and scripted the synchronization process for multiple vaults. Whether you juggle personal and work vaults or maintain multiple knowledge bases, these snippets are must-have productivity hacks. Spice Rating: üå∂üå∂üå∂ - This guide covers using bash scripts to synchronize Obsidian plugin settings across multiple vaults. Familiarity with Obsidian‚Äôs plugin folder structure and prior experience using bash terminals is assumed. Running code from the internet can be destructive so always test and make backups of your files before hand! Also note I‚Äôm writing this on a Windows machine but should work for any platform since you can run bash on all of them. Why don‚Äôt I use git? I do, but I don‚Äôt like tracking plugin settings which could have sensitive information like API keys üò±! Sync Obsidian Plugin Settings (single vault) If you haven‚Äôt been scared away, I will briefly break down how the first simple one-liner works. There are 2 versions of each snippet, dry run and execute, for both single and multi-vault variants. You‚Äôll want to use the single vault variant if the number of vaults you have is currently manageable or feel more comfortable running just one line of code. The ‚ÄúDry Run‚Äù command uses the find utility to locate all data.json files within the .obsidian/plugins/ directory of your current vault. Note that you‚Äôll need to cd to your current vault first. This is where Obsidian stores plugin settings and data. The -print option just prints the full paths of the matched files to the console, allowing you to preview what would be copied without actually copying anything yet. The ‚ÄúExecute‚Äù command is similar, but instead of just printing the paths, it uses the -exec option to run the cp command on each matched file. This copies the data.json file to the /p/obsidian/personal-notes/ directory while preserving the same nested folder structure under .obsidian/plugins/. So in effect, running this second command line will sync all your current vault‚Äôs plugin settings over to a second vault located at /p/obsidian/personal-notes/. Dry Run (print only) find .obsidian/plugins/ -type f -name data.json -print Execute (copy) find .obsidian/plugins/ -type f -name data.json -exec cp {} /p/obsidian/personal-notes/{} \\; Sync Obsidian Plugin Settings (multiple vaults) This variant extends previous single vault script to handle multiple destinations. Similar to the single vault variant, the ‚ÄúDry Run‚Äù version of the script just prints out the cp operations it would perform without actually copying anything. This lets you validate the output before executing the real copy. Dry run (print only) find .obsidian/plugins/ -type f -name data.json -exec sh -c ' src=\"$1\" dir=$(dirname \"$src\") for dest in /p/obsidian/business-vault /p/obsidian/personal-notes /p/obsidian/mysite.github.io /p/obsidian/obsidian-notes; do echo cp -uv \"$src\" \"$dest/$dir\" done' _ {} \\; Execute (copy) find .obsidian/plugins/ -type f -name data.json -exec sh -c ' src=\"$1\" dir=$(dirname \"$src\") for dest in /p/obsidian/business-vault /p/obsidian/personal-notes /p/obsidian/javrin.github.io /p/obsidian/obsidian-notes; do cp -uv \"$src\" \"$dest/$dir\" done' _ {} \\; Here‚Äôs a breakdown of what‚Äôs happening: find is used again to locate all data.json files in the current vault‚Äôs .obsidian/plugins/ folder. For each match, it runs the code in the -exec sh -c block, passing the f","date":"2024-04-20","objectID":"/posts/2024-04-20-tame-multiple-obsidian-vaults-with-this-plugin-sync-hack/:0:0","tags":["obsidian","bash","snippet"],"title":"Tame Multiple Obsidian Vaults With This Plugin Sync Hack","uri":"/posts/2024-04-20-tame-multiple-obsidian-vaults-with-this-plugin-sync-hack/"},{"categories":["Dev"],"content":"UE5 Game Dev Log Today‚Äôs development sessions were about creating a dash roll mechanic for the character and re-animating bits of her locomotion animation in Cascadeur after the retargeting from UE5 mannequin. The video is mostly me noodling around in Cascadeur which I‚Äôve been evaluating for character animation then applying the cleaned animation into the game and finally testing it along with the other fun new features I added. ","date":"2024-04-18","objectID":"/posts/2024-04-18-ue5-game-dev-log/:0:0","tags":["ue5"],"title":"UE5 Game Dev Log","uri":"/posts/2024-04-18-ue5-game-dev-log/"},{"categories":["Dev"],"content":"About the Character The character model and rig I‚Äôm working with is from the Shadow Fight Arena 4 game, which I have zero experience with playing, provided by the talented team at Cascadeur on Renderhub. I chose her for the accessories she has to animate. It‚Äôs a decent character, but the rig definitely isn‚Äôt the cleanest. She‚Äôs functional but not reusable so the goal is to eventually rebuild her into a more polished portfolio piece. This process is testing my knowledge of many aspects of character development and if it‚Äôs possible I‚Äôd also like to share the final rig. The rig was prepared in Maya for Chaos cloth and physics simulations, ensuring that it can achieve realistic cloth dynamics within UE5. For this character, I‚Äôve simulated the chest, earrings, and the back of the bandana, adding an extra layer of realism and movement to the overall look. ","date":"2024-04-18","objectID":"/posts/2024-04-18-ue5-game-dev-log/:1:0","tags":["ue5"],"title":"UE5 Game Dev Log","uri":"/posts/2024-04-18-ue5-game-dev-log/"},{"categories":["Dev"],"content":"Today‚Äôs Accomplishments Dash Collision Actor and Movement Mechanic Taking inspiration from the iconic Sonic the Hedgehog games, I implemented a ‚ÄúDash‚Äù collision actor and character movement mechanic. The player is able to perform a dash roll using the controller or get launched by overlapping with the actor placed in the world. This is achieved using some vector multiplication combined with ‚ÄúLaunch Character‚Äù function and a rolling animation montage, and allows our character to perform a lightning-fast dash or roll, adding an exciting yet over-powered dodge/movement ability to the gameplay. It will need to be fine-tuned but it‚Äôs fun for the time being. Animation Retargeting and Refinement I successfully retargeted the UE Mannequin animations over to the custom character rig, but the retargeted animations are, as usual, only a good starting point for gross character movements as they aren‚Äôt very appealing. So I took the time to start reanimating the locomotion beginning with idle and walk-in-place animations. Next, I will tackle the walk and run motions. Cascadeur is making quick work out of this process. I had only intended to clean up the retargeted motion however I ended up throwing most of the original animation out and taking a few key poses and sprucing them up here and there. Even so, with the help of Cascadeur‚Äôs smart autoposing rig and unbake animation tool, I was able to make quick work of it. Overall, it was a productive day filled with promising advancements in character animation and movement mechanics. Stay tuned for more updates as I continue to tweak and add more to this character in Unreal Engine 5. ","date":"2024-04-18","objectID":"/posts/2024-04-18-ue5-game-dev-log/:2:0","tags":["ue5"],"title":"UE5 Game Dev Log","uri":"/posts/2024-04-18-ue5-game-dev-log/"},{"categories":["CMS"],"content":"I‚Äôve been investigating solutions for CMS but haven‚Äôt jumped into anything, until today, and who can blame me with the number of solutions sprouting up daily it seems. There‚Äôs decapcms which I‚Äôve known about since day 1, the gran-daddy you might say. cms distinction decapcms Previously Netlify staticcms Fork of Decap focused on core features sveltia-cms Decap‚Äôs backend with a prettier skin statamic Full-stack SSG and CMS I‚Äôm currently using Obsidian as a local CMS solution which is more than capable but I feel the content creation process could be more efficient and accessible from more devices. The latter is also possible with Obsidian but the setup would be very involved. The goal I set for myself for the beginning of 2024 is getting into a consistent habit of blogging and updating my Hugo website. I‚Äôm constantly in awe at individuals, presumably busier than I, that can keep up with a blog or any kind of content creation! Yesterday I found out about a NKOTB, Pages CMS, a new alternative CMS for static websites hosted on GitHub with other SCM platforms coming soon. Getting started is free and easy with the online version and you can self-host on Cloudflare. There are various solutions out there, but I‚Äôm looking for a tool that‚Äôs free, accessible online with a clean, easy to use UI/UX/DX and Pages seems to fit that bill. I‚Äôm a team of one, so I‚Äôm not as concerned about the aspects of Pages that facilitate collaboration but it definitely lends itself well to that end, with its robust configuration feature and online editing. Pages aims to be a CMS that‚Äôs compatible with a variety of SSGs, Hugo being just one of them. While there are intricacies of Hugo that might need to be addressed, I‚Äôve tried it out and I‚Äôm surprised at how flexible it is, being able to handle a flat or collection (bundles in Hugo) file structures. I‚Äôm able to use it presently to draft posts online from any device and polish them off in Obsidian, but I‚Äôd like to publish, at least short ‚ÄúTIL‚Äù posts, from the web. I won‚Äôt be letting go of Obsidian any time soon, on the contrary I‚Äôll be molding the configuration to better suit the task, and hopefully be sharing the progress here so stay tuned! What‚Äôs your favorite tool for content management? Are you a solo developer? I‚Äôd be interested to know! ","date":"2024-02-23","objectID":"/posts/2024-02-23-trying-out-pages-cms-a-new-cms-for-github/:0:0","tags":["eval"],"title":"Trying Out Pages CMS - A New CMS for GitHub","uri":"/posts/2024-02-23-trying-out-pages-cms-a-new-cms-for-github/"},{"categories":["SSG"],"content":"Photo by Chris Barbalis on Unsplash üëã Hello Hugo This is my new site generated using Hugo! Ahhhh ‚ò∫ ‚Äì a fresh start. A new chapter is beginning, and I‚Äôve had my eye on Hugo for a while. Having started and abandoned SSG (static site generator) projects in the past, this might be thee one for a while. It feels stable, feature rich, and easy to work with‚Äìall characteristics that are crucial for consistently keeping up and growing a website. If you‚Äôre looking for an SSG, the most popular ones seem to be: Jekyll¬†- Ruby based static site generator. Hugo¬†- Go based static site generator. Gatsby¬†- React based framework for building websites and apps. In this post I‚Äôd like to briefly share insights from my comparative analysis of SSGs and explain why I chose Hugo over Jekyll or Gatsby this time around. Information here is not intended to be used as persuasive arguments for using one or the other, but you might draw insights from my personal journey. ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:0:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"üåé Overview I‚Äôm coming from using Jekyll, a Ruby-based static site generator, to build my previous site and had mixed feelings about it‚Äôs performance and ease-of-use. I decided to explore the current options and I found that Jekyll and Hugo are still very popular, so I‚Äôll try to focus on them primarily and sum up all the information I gathered from Googling for an afternoon. Jekyll still seems to be preferred if you‚Äôre looking for ease of initial setup which became a little more difficult for the beginner to deploy after Jekyll 3 which requires you to use GitHub Actions to deploy. Hugo seems to be preferred, for those experienced with SSGs, for it‚Äôs performance (just keep an eye on JS load). For example, it comes with Render Hooks for creating responsive images. ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:1:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"üö¢ Deployment The argument for ease of setup and deployment of Jekyll is outdated now. If you want to use the latest Jekyll, you‚Äôll have to use GitHub Actions, and if you don‚Äôt you‚Äôre stuck with using Jekyll 3 forever. Or, go with Hugo which is the same amount of setup, and for no reason are you locked to a specific version. Support for Jekyll 4.0 ¬∑ Issue #651 ¬∑ github/pages-gem ¬∑ GitHub Why GitHub chose Actions for deployment Using Actions to orchestrate Pages publishing provides many more options for choosing your authoring framework (Next.js,¬†Hugo,¬†Gatsby,¬†Jekyll,¬†NuxtJS¬†or other technologies, and the associated versions thereof) as well as giving you finer control over the publishing process, such as leveraging deployment gates. ~ GitHub Pages: Custom GitHub Actions Workflows (beta) - The GitHub Blog ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:2:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"üèá Performance When it comes to evaluating the performance of SSGs PageSpeed Insights is your friend or worst enemy here. Here‚Äôs a great article explaining Google Lighthouse scores: How to get a 100% Google Lighthouse score | Usecue web development Hugo for performance I ditched Gatsby and migrated this site over to Hugo. Hugo is often viewed as the fastest static site generator‚Ä¶ it is. ~ Goodbye Gatsby, Hello Hugo - Made Mistakes Render hooks Then there‚Äôs Hugo, which lets you customize how Markdown outputs to HTML with what it calls¬†render hooks. These render hook templates are standard HTML with the same¬†templating logic¬†used to write shortcodes, partials, and layouts. Something I appreciate, as writing HTML comes more naturally to me than JavaScript or Ruby. ~ Goodbye Gatsby, Hello Hugo - Made Mistakes ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:3:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"ü§î Sentiment There‚Äôs certainly more depth when it comes to comparing SSGs like Hugo, Jekyll, and Gatsby. However, this summarizes what I discovered during my initial research. There isn‚Äôt a ton of new information out there. I also ran manual sentiment analysis on this dated but relevant GitHub conversation: Is the Jekyll project dead? - Help - Jekyll Talk setup complexity scope templating build process version community complete jekyll üòê üòê üòê üôÇ üôÇ (na) üôÇ üôÇ üôÇ hugo üôÅ üòµ ü§î üôÅ üôÅ üôÅ üôÅ üôÅ In my opinion, people were more enthusiastic about Jekyll and more unenthused by the complexity of Hugo, however in practice I‚Äôd have to say that things must have changed quite a bit from 2021-2022 because yeah Hugo can be complex if you want it to be but it doesn‚Äôt need to be. For instance, in case it‚Äôs not obvious, loveit, the theme I‚Äôm using looks great on mobile platforms and has implemented just about every feature I absolutely need for a basic site. deployment I mentioned Hugo has a build/deploy process you have to maintain, but these days that problem has been worked out and it can take an hour or two max to set that up if you‚Äôre unexperienced with Actions (see Resources below). ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:4:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"üéÄ Summing It Up While Jekyll is alive and well and continues to be used for creating impressive websites, my research didn‚Äôt uncover substantial evidence favoring Jekyll over Gatsby or Hugo. Why I chose Hugo came down to those key characteristics I mentioned in the beginning. On top of that, no more running gem as well as bundle commands, and keeping up with dependencies is much less of a hassle to non-existent as of yet. So far, I‚Äôm really impressed with local preview builds, how fast and responsive they are, and visually the site is an exact match locally as it is deployed. Finally, the project directory feels less cluttered (and you know what they say about cleanliness). Every body likes lists, so here‚Äôs my top 10 reasons for using Hugo in no particular order: Stability Features Ease-of-use Robust and easy to use command line Dependency management Clean project structure Performance Speedy preview builds Rapid deployment It‚Äôs free! As for performance‚Ä¶ I‚Äôll certainly be üëÄ and üî®ing my score, but it‚Äôs fast! So here‚Äôs to new beginnings, Hugo. ü•Ç If you‚Äôre still unsure about which static site generator is right for you, I encourage you to explore the links provided and do your own research (DYOR)! Please hit me up or share on social media if you found this content helpful or have suggestions and have a nice day! ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:5:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"üîó Resources ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:0","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"Discussions Support for Jekyll 4.0 ¬∑ Issue #651 ¬∑ github/pages-gem ¬∑ GitHub GitHub Pages: Custom GitHub Actions Workflows (beta) - The GitHub Blog ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:1","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"Actions Hugo setup ¬∑ Actions ¬∑ GitHub Marketplace ¬∑ GitHub GitHub - peaceiris/actions-gh-pages: GitHub Actions for GitHub Pages üöÄ Deploy static files and publish your site easily. Static-Site-Generators-friendly. GitHub - peaceiris/actions-gh-pages: GitHub Actions for GitHub Pages üöÄ Deploy static files and publish your site easily. Static-Site-Generators-friendly. ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:2","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"Pages Managing a custom domain for your GitHub Pages site - GitHub Docs Automatic token authentication - GitHub Docs Creating a GitHub Pages site - GitHub Docs ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:3","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"Theme About LoveIt - LoveIt ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:4","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":["SSG"],"content":"Getting Started Jekyll Codex Hugo Codex ","date":"2023-08-30","objectID":"/posts/2023-08-30-hello-hugo/:6:5","tags":["hello-world"],"title":"üëã Hello Hugo!","uri":"/posts/2023-08-30-hello-hugo/"},{"categories":null,"content":"About me and this website","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Author ‚ÄâJonas Avrin (javrin) | CV | Residence: Connecticut, USA Welcome! I‚Äôm a Pipeline Technical Director by trade with experience working in the Animation/VFX/Games industries. For an overview, cruise on over to my LinkedIn profile or take a look at my CV linked above. With over 15 years of professional experience, I‚Äôve transitioned from artist roles such as Animator and Character TD to technical roles such as Technical Director solving complex challenges and developing sophisticated workflows for AAA games, commercials, and movies. In technical roles, I‚Äôve contributed my engineering expertise to developing animation tools and pipelines for iconic animated and live action cinematic productions. For a (mostly) complete list of projects, check out imdb. As an active contributor on GitHub, I believe strongly in free (libre) and open-source development and have contributed to open source including rez, an incubation project under the Academy Software Foundation. Currently, I‚Äôm captivated by the potential of real-time pipelines utilizing game engines like Unreal for various mediums, from games to virtual production. I am equally motivated to harness the power of machine learning and AI as capable tools for realizing humanity‚Äôs most ambitious ideas. ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Site Created using Hugo. A fast and flexible static site generator built with love by¬†bep,¬†spf13, and¬†friends¬†in¬†Go. ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Theme Styled using LoveIt. ¬†LoveIt is a clean, elegant but advanced blog theme for Hugo developed by ‚ÄâDillon. It is based on the original LeaveIt Theme and KeepIt Theme. ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Interesting projects I've worked on","date":"2019-08-02","objectID":"/projects/","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Game Character Rigging and Animation Demo Examples of characters I‚Äôve animated in Cascadeur and imported into Unreal Engine as well as the rigging process used to prepare models for animation for use in Unreal Engine. Animation Breakdown Cascy dance animation Character model and rig shipped with Cascadeur and imported into Unreal Materials created in Unreal Animated in Cascadeur using reference and imported into Unreal Midnight Witch backflip animation Model and rig for Shadow Fight Arena 4 game provided by Cascadeur on Renderhub Rig prepared in Maya for Chaos cloth simulation Cloth simulated in Unreal Animated in Cascadeur using reference and imported into Unreal Standard Model Male breakdance animation Model shipped with Cascadeur Rigged in Maya using mGear and the mannequin template for Unreal Engine 5.3 Animation is mocap that is retargeted from UE mannequin and cleaned in Cascadeur Std. Model Male silly dance animation Animation is mocap that is retargeted from UE mannequin and cleaned in Cascadeur Rigging Breakdown Joints are bound to the meshes and weights painted (not shown) Weights are exported mGear UE5 mannequin template is used to start with but is modified significantly, limbs recreated to suit a T-pose and 2 fingers are all that is needed for this character. Guide positioning - Guides are positioned, rig is built and tested repetitively to ensure accuracy and usability Rig building Limbs are built separately to optimize for performance The entire rig is mirrored and built at the end of the process Rig testing The character rig is removed Guides are built Skin weights are imported Deformations are tested The same process is repeated for each mesh bound to the skeleton Refinement The rig is refined by repeating from an earlier stage of the entire process Control Shaping The control curves are reshaped to maximize animation ergonomics Unreal Engine Game Dev Videos of projects I‚Äôve made using Unreal Engine. Note The following demo projects focus on specific game mechanics. They aren‚Äôt meant to do everything, just do a few things really well. ","date":"2019-08-02","objectID":"/projects/:0:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"GAS Top Down RPG GAS (Gameplay Ability System) RPG created using C++ in Unreal Features Health and mana attributes Effector actor for testing application of gameplay effects Game UI Health \u0026 mana globes Enemy health bars Broadcasting and listening for attribute changes Dynamically update attribute menu Gameplay effects Instant Periodic Infinite Level scaling Gameplay tags Combat abilities Vital attributes Damage types Gameplay abilities Projectile spell Click to move Auto running Ability tasks Motion warp towards projectile target RPG character classes Hero and enemy character classes Multiplayer Play as listen server or client All abilities and effects replicable ","date":"2019-08-02","objectID":"/projects/:1:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Fortnite Building Recreates the build system in Fortnite in blueprints. Features Inventory of fun new building materials and their attributes such as cost and health Detailed UI with health and inventory indicators Destroyed objects add their materials to the inventory Retargeted character animation ","date":"2019-08-02","objectID":"/projects/:2:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Testing Grounds A game that implements its own streaming level system with actor pooling. Focuses on optimizing game assets and procedurally generated game levels. Features Streaming levels and actor pooling AI Enemy programming, EQS pathfinding, and animation ","date":"2019-08-02","objectID":"/projects/:3:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Killer Karts A go-cart racing style game that focuses on state synchronization solutions for multiplayer. Killer Karts Features State synchronization with an authoritative server Cheat protection Lag compensation ","date":"2019-08-02","objectID":"/projects/:4:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Puzzle Platforms Allows players to connect to a multiplayer puzzle platformer over LAN as well as Steam. Puzzle Platforms Features Multiplayer over LAN network via VPN Join multiplayer lobby and game session over Steam UI development State synchronization Maya Videos of projects I‚Äôve made using Autodesk Maya. ","date":"2019-08-02","objectID":"/projects/:5:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Character TD Demo Kaylee is a cartoon-style character I rigged from start to finish. Her face rig has a high level of fidelity for being only a joint driven rig‚Äìwe were on a tight time budget and I did all the work pro bono while being employed full time. She was animated in a few previs sequences in the short-film Hephaestus before the project came to abrupt halt, and many of us were whisked away by our careers in the industry. ‚ÄìRIP Doug Note The demo shows Kaylee moving around in her optimized (except the face) anim mesh. She‚Äôs also skinned to a high res render mesh. Breakdown Fully rigged cartoon-style stretchy character Body part visibility for the anim mesh Fully scalable Rigged goggles and hair geo (by Raj Bajracharya) Custom UIs for character setup and control for animation FX Videos of FX and workflows I‚Äôve created and supported using various packages. ","date":"2019-08-02","objectID":"/projects/:6:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Lightning ‚ÄúCrawlers‚Äù for Thor: Love and Rockets I used Houdini Engine with Houdini, Maya, and Katana to provide the capability to import, animate, export, and render lightning effects in Renderman used on the project Thor: Love and Rockets. Breakdown Automated Import rigged Houdini Asset Animated the lightning effect for mjolner and lightning bolt Automated Alembic caching of the asset via export UI Debugged render artifacts using Houdini, Maya, and Katana Demo Reels Demos of my work in the Games/Animation/VFX industry. ","date":"2019-08-02","objectID":"/projects/:7:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Technical Animation / TD Show Reel Note This is an old demo I made before I went to work at BlueSky studios where I worked on many animated films before the studio was shut down. Please visit my imdb to see those projects. ","date":"2019-08-02","objectID":"/projects/:8:0","tags":null,"title":"Projects","uri":"/projects/"}]